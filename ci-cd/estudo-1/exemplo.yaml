name: CI/CD Pipeline Exemplo

on:
  push:
    branches: [ "main" ]

jobs:
  # ------------------------------------------------------------
  # JOB 1 (ESTÁGIO VIRTUAL: BUILD)
  # Este Job não tem 'needs', então ele é o primeiro a ser executado.
  # ------------------------------------------------------------
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Instalar e Compilar Backend
        run: ./build_script_backend.sh
      - name: Instalar e Compilar Frontend
        run: |
          npm install
          npm run build
      - name: Armazenar artefato compilado
        uses: actions/upload-artifact@v4
        with:
          name: meu-app-compilado
          path: build/ # Salva os arquivos para jobs futuros

  # ------------------------------------------------------------
  # JOB 2 (ESTÁGIO VIRTUAL: TEST)
  # Este Job só inicia APÓS o Job 'build' ser concluído com sucesso.
  # ------------------------------------------------------------
  test:
    needs: [build] # <--- ESSA LINHA DEFINE A DEPENDÊNCIA SEQUENCIAL
    runs-on: ubuntu-latest
    steps:
      - name: Baixar artefato de build
        uses: actions/download-artifact@v4
        with:
          name: meu-app-compilado
          path: .
      - name: Executar Testes Unitários
        run: npm run test:unit
      - name: Rodar Análise de Segurança
        run: security_scan.sh

  # ------------------------------------------------------------
  # JOB 3 (ESTÁGIO VIRTUAL: DEPLOY)
  # Este Job só inicia APÓS o Job 'test' ser concluído com sucesso.
  # ------------------------------------------------------------
  deploy:
    needs: [test] # <--- ESSA LINHA DEFINE A DEPENDÊNCIA SEQUENCIAL
    runs-on: ubuntu-latest
    environment: staging # Define o ambiente de implantação
    steps:
      - name: Implantar no Staging
        run: ./deploy_to_aws_script.sh